#!/usr/bin/env bash
source common

### CONFIGURATION ###

### GDRIVE CONFIG ###
usegdrive=yes
GD_URL=http://gg.gg/shagbag913_roms
GD_TESTURL=http://gg.gg/shagbag913_testbuilds
## Directories
gdir1=/media/shagbag913/Roms/gdrive/Roms/AospExtended
gdir2=/media/shagbag913/Roms/gdrive/Roms/DirtyUnicorns
gdirtest=/media/shagbag913/Roms/gdrive/TestBuilds

## Discord notifications
disnotif=yes

# wether or not autopilot builds are clean or not, default is no.
autopilot=

# Here when it asks for "romzip", this means part of the ROM zip's name that does not change. For example, if the final ROM zip is named 
# "AospExtended-v5.5-sailfish-20180602-0231-UNOFFICIAL", what I would put for the ROM name would be "AospExtended-v5.5-sailfish", this way the ROMS can be autouploaded.

# Rom #1 Directory AND name of rom.
romdir1=/media/shagbag913/Roms/roms/aex
name1="Aosp Extended"
romzip1="AospExtended-v5.7-sailfish"

# Rom #2 Directory AND name of rom.
romdir2=/media/shagbag913/Roms/roms/du
name2="Dirty Unicorns"
romzip2=du_sailfish-v12

out="out/target/product/${DEVICE}"

# Functions
sync() {
    echo -e ""
    echo -e "${RED}Syncing Up.${RESTORE}"
    repo sync ${PAR_THREAD} --no-tags --no-clone-bundle --force-sync -f -q
        if [[ $? = 0 ]]; then
            echo -e "${BLUE}Sync Successful!${RESTORE}"
        else
            echo -e "${GREEN}Sync ${RED}Failed!${RESTORE}"
        fi
}
clean() {
    echo -e ""
    echo -e "${RED}Makin Clobber.${RESTORE}"
    cd $romdir1
    make clobber
    cd $romdir2
    make clobber
    cd $romdir3
    make clobber
    if [[ $disnotif = yes ]]; then dc_msg "Outputs Cleaned. These builds will take a while :grin:"; fi
}
brinch() {
    echo -e ""
    echo -e "${RED}Brunching.${RESTORE}"
    . build/envsetup.sh
    brunch ${DEVICE}
}
linch() {
    echo -e ""
    echo -e "${RED}Lunching.${RESTORE}"
    . build/envsetup.sh
}
gdrive() {
    if [[ $usegdrive = yes ]]; then
        if [[ $test != true ]]; then
            cp `ls -rt ${romdir1}/${out}/${romzip1}*.zip  | tail -1` ${gdir1}
            cp `ls -rt ${romdir2}/${out}/${romzip2}*.zip  | tail -1` ${gdir2}
            cp `ls -rt ${romdir3}/${out}/${romzip3}*.zip  | tail -1` ${gdir3}
	    cd ${GD_FOLDER} && grive
            dc_msg "**Google Drive: Builds uploaded. ${GD_URL}**"
        else
            cp `ls -rt ${romdir1}/${out}/${romzip1}*.zip  | tail -1` ${gdirtest}
            cp `ls -rt ${romdir2}/${out}/${romzip2}*.zip  | tail -1` ${gdirtest}
            cp `ls -rt ${romdir3}/${out}/${romzip3}*.zip  | tail -1` ${gdirtest}
            cd ${GD_FOLDER} && grive
            dc_msg "**Google Drive: Test builds uploaded.** *Flash these at your own risk!* ${GD_TESTURL}"
        fi
    fi
}
gdrivepurge() {
    echo -e "${RED} Cleaning GDrive Directories."
    for n in ${gdir1} ${gdir2}; do
        rm -rf $n/*
    done
    cd ${GD_FOLDER} 
    grive
    echo -e "${GREEN}GDrive folders purged.${RESTORE}"
    if [[ $disnotif = yes ]]; then dc_msg "**Google Drive: ROM's purged.**"; fi
}
gdrivepurgetest() {
    echo -e "${RED} Cleaning GDrive Directories."
    rm -rf ${gdirtest}/*
    cd ${GD_FOLDER}
    grive
    echo -e "${GREEN}GDrive folders purged.${RESTORE}"
    if [[ $disnotif = yes ]]; then dc_msg "**Google Drive: test builds purged.**"; fi
}
autopilot() {
    if [[ $autopilotclean = yes ]]; then clean; fi
    cd $romdir1
    sync
    if [[ $disnotif = yes ]]; then dc_msg "**Building ${name1}.**"; fi
    DATE_START1=$(date +"%s")
    . build/envsetup.sh
    lunch aosp_sailfish-userdebug
    make aex ${PAR_THREAD} && rom1=successful
    DATE_END1=$(date +"%s")
    DIFF1=$(($DATE_END1 - $DATE_START1))
        if [[ $disnotif = yes ]]; then
            if [[ $rom1 = successful ]]; then
                dc_msg "*Build Successful in $(($DIFF1 / 60)) minute(s).*"
            else 
                dc_msg "*Build Failed in $(($DIFF1 / 60)) minute(s).*"
            fi
        fi
    cd $romdir2
    sync
    if [[ $disnotif = yes ]]; then dc_msg "**Building ${name2}.**"; fi
    DATE_START2=$(date +"%s")
    brinch && rom2=successful
    DATE_END2=$(date +"%s")
    DIFF2=$(($DATE_END2 - $DATE_START2))
        if [[ $disnotif = yes ]]; then
            if [[ $rom2 = successful ]]; then
                dc_msg "*Build Succesful in $(($DIFF2 / 60)) minute(s).*"
            else
                dc_msg "*Build Failed in $(($DIFF2 / 60)) minute(s).*"
            fi
        fi
    gdrive
}
while [ "$1" != "" ]; do
    case $1 in
        -s | --sync ) sync;;
        -c | --clean ) clean;;
        -a | --autopilot ) autopilot;;
        -p | --gdrivepurge ) gdrivepurge;;
        -tp | --gdrivetestpurge ) gdrivepurgetest;;
        -t | --test ) test=true;;
        * ) echo -e "${GREEN} What are you doing!?${RESTORE}"; echo -e " ${RED}build $1${RESTORE} is not a supported command :/";;
    esac
shift
done
